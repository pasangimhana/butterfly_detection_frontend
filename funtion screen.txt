import 'package:flutter/material.dart';
import 'package:foodie/constants.dart';
import 'package:foodie/main_layout.dart';
import 'dart:io';
import 'package:foodie/api_service.dart';
import 'package:foodie/screens/location.dart';
import 'package:location/location.dart' as loc;
import 'package:geocoding/geocoding.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pdfWidgets;
import 'package:printing/printing.dart';
import 'package:path_provider/path_provider.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'dart:typed_data';
import 'package:flutter/services.dart';  // Import rootBundle
import 'package:flutter/services.dart';
import 'package:xml/xml.dart';




class ButterflyScreen extends StatefulWidget {
  ButterflyScreen({
    Key? key,
    required this.detected,

  });
  LatLng? selectedLocation;

  final String detected;
 



  @override
  _ButterflyScreenState createState() => _ButterflyScreenState();
}



class _ButterflyScreenState extends State<ButterflyScreen> {


  String? currentDetected;
  loc.LocationData? currentLocation;
  final location = loc.Location();
  String? locationName;
  File? _pdfFile;
   

    Map<String, dynamic>? butterflyInfo;

  @override
  void initState() {
    super.initState();
    _initializeLocation();
    currentDetected = widget.detected;
    _fetchAndSetData();
  }

 String getXmlFileName(String detected) {
    switch (detected) {
      case 'Ceylon Blue Glassy Tiger':
        return 'assets/butterfly_species_1.xml';
      case 'Common Mime Swallowtail':
        return 'assets/butterfly_species_2.xml';
      case 'Crimson Rose':
        return 'assets/butterfly_species_3.xml';
      case 'Common Mormon':
        return 'assets/butterfly_species_4.xml';
      case 'Common_Indian_Crow':
        return 'assets/butterfly_species_5.xml';
      default:
        throw Exception('Unknown butterfly species detected');
    }
  }

 Future<Map<String, dynamic>> parseButterflyData(String xmlFileName) async {
  final xmlStr = await rootBundle.loadString(xmlFileName);
  final xmlDocument = XmlDocument.parse(xmlStr);

  final butterflyElement = xmlDocument.findElements('Butterfly').first;

  final commonName = butterflyElement.findElements('CommonName').first.text;
  final scientificName = butterflyElement.findElements('ScientificName').first.text;

  final hostPlantElements = butterflyElement.findElements('HostPlants').first.findElements('HostPlant');
  final List<Map<String, String>> hostPlants = hostPlantElements.map((hostPlantElement) {
    return {
      'name': hostPlantElement.getAttribute('name') ?? '',
      'image': hostPlantElement.getAttribute('image') ?? '',
    };
  }).toList();

  final imageElements = butterflyElement.findElements('Image');
  final List<String> images = imageElements.map((imageElement) => imageElement.text).toList();

  return {
    'commonName': commonName,
    'scientificName': scientificName,
    'hostPlants': hostPlants,
    'images': images,
  };
}


  Future<String?> getPlaceAddress(double lat, double lng) async {
  try {
    List<Placemark> placemarks = await placemarkFromCoordinates(lat, lng);

    if (placemarks.isEmpty) {
      return null;
    }

    final place = placemarks[0];

    // This is a basic address format, you can customize it as needed.
    return "${place.street}, ${place.subLocality}, ${place.locality}, ${place.postalCode}, ${place.country}";
  } catch (error) {
    print("Error obtaining address: $error");
    return null;
  }
}

//assets/butterfly_species_1.xml == Ceylon Blue Glassy Tiger
//assets/butterfly_species_2.xml ==Common Mime Swallowtail
//assets/butterfly_species_3.xml == Crimson Rose
//assets/butterfly_species_4.xml == Common Mormon
//assets/butterfly_species_5.xml == Common_Indian_Crow


  Future<void> _initializeLocation() async {
    bool? serviceEnabled = await location.serviceEnabled();
    if (serviceEnabled == null || !serviceEnabled) {
      serviceEnabled = await location.requestService();
      if (serviceEnabled == null || !serviceEnabled) return;
    }

    loc.PermissionStatus? permissionGranted = await location.hasPermission();
    if (permissionGranted == loc.PermissionStatus.denied) {
      permissionGranted = await location.requestPermission();
      if (permissionGranted != loc.PermissionStatus.granted) {
        return;
      }
    }

    _fetchLocation();
  }

 Future<void> _fetchAndSetData() async {
    File myImage = File('path_to_your_image.jpg');

    try {
      Map<String, dynamic> response = await ApiService().uploadImage(myImage);

      setState(() {
        currentDetected = response['class'];
      });

      if (currentDetected != null) {
        final xmlFileName = getXmlFileName(currentDetected!);  // Updated this line
        butterflyInfo = await parseButterflyData(xmlFileName);
      } else {
        print('currentDetected is null');
      }

    } catch (error) {
      print("Error fetching data: $error");
    }
  }



  Future<void> _fetchLocation() async {
    try {
      var _locationData = await location.getLocation();
      print("Latitude: ${_locationData.latitude}, Longitude: ${_locationData
          .longitude}");

      List<Placemark> placemarks = await placemarkFromCoordinates(
        _locationData.latitude!,
        _locationData.longitude!,
      );

      if (placemarks.isEmpty) {
        print("No placemarks found for the given coordinates.");
        return;
      }

      final place = placemarks[0];
      locationName =
      "${place.locality}, ${place.administrativeArea}, ${place.country}";

      print("Fetched location name: $locationName");

      setState(() {
        currentLocation = _locationData;
      });
    } catch (e) {
      print("Error fetching location: $e");
    }
  }

  Future<void> saveHistory(String location, String detectionClass) async {
    final url = 'https://butterfly-detection.onrender.com/save-history';

    final response = await http.post(
      Uri.parse(url),
      headers: {
        'Content-Type': 'application/json',
      },
      body: json.encode({
        'location': location,
        'detection_class': detectionClass,
      }),
    );

    if (response.statusCode == 200) {
      print("History saved successfully!");
    } else {
      throw Exception('Failed to save history');
    }
  }

Future<pdfWidgets.MemoryImage> _fetchNetworkImage(String url) async {
  final response = await http.get(Uri.parse(url));
  if (response.statusCode != 200) {
    throw Exception('Failed to load image');
  }
  final Uint8List uint8list = response.bodyBytes;
  return pdfWidgets.MemoryImage(uint8list);
}


Future<void> _saveAsPDF(String description) async {
  final pdf = pdfWidgets.Document();

  pdf.addPage(
    pdfWidgets.Page(
      build: (pdfWidgets.Context context) {
        return pdfWidgets.Center(
          child: pdfWidgets.Text(
            butterflyInfo?['description'] ?? 'No description available',
            style: pdfWidgets.TextStyle(fontSize: 14),
          ),
        );
      },
    ),
  );


  final directories = await getExternalStorageDirectories(type: StorageDirectory.documents);
  if (directories == null || directories.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Failed to find Documents directory.')),
    );
    return;
  }

  final documentsDirectory = directories.first;
  _pdfFile = File("${documentsDirectory.path}/butterfly_description.pdf");
  await _pdfFile!.writeAsBytes(await pdf.save());

  // Display the saved path to the user
  ScaffoldMessenger.of(context).showSnackBar(
   SnackBar(content: Text('Saved to ${_pdfFile!.path}')),

  );
}





   @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return MainLayout(
      title: 'Butterfly detection',
      customBody: Container(
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    Text(
                      widget.detected,
                      style: const TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                      ),
                    ),

                //preview image of according to current detection gettig from xml
                            Container(
                      height: 200,  // Adjust this value as needed
                      child: ListView.builder(
                        itemCount: butterflyInfo?['images']?.length ?? 0,
                        itemBuilder: (context, index) {
                          final imageUrl = butterflyInfo?['images'][index];
                          return imageUrl != null ? Image.network(imageUrl) : SizedBox.shrink();
                        },
                      ),
                    ),

                // Text(
                //   'Description: ${butterflyInfo?['description'] ?? 'Fetching information...'}',
                //   style: TextStyle(
                //     fontSize: 14,
                //     color: AppColors.primaryColor,
                //   ),
                // ),
            
                    Container(
                      width: size.width - 80,
                      margin: const EdgeInsets.only(top: 10),
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 20,
                      ),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(20),
                        color: AppColors.primaryColor.withOpacity(0.3),
                      ),
                      child: Center(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'Butterfly information',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w400,
                                color: AppColors.primaryColor,
                              ),
                            ),
                            const SizedBox(height: 10),
                            if (currentLocation != null) ...[
                              Text(
                                'Location:',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: AppColors.primaryColor,
                                ),
                              ),
                              SizedBox(height: 5),
                              Text(
                                'Location: ${locationName ?? 'Fetching location...'}',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: AppColors.primaryColor,
                                ),
                              ),
                              const SizedBox(height: 20),
                            ],
                            Text(
                              'Description:',
                              style: TextStyle(
                                fontSize: 14,
                                color: AppColors.primaryColor,
                              ),
                            ),
                            SizedBox(height: 5),
                            Text(
                          //description of xml
                         butterflyInfo?['description'] ?? 'No description available',
                            ),
                            ElevatedButton(
                              onPressed: () {
                                
                              },
                              child: Text("Save Description as PDF"),
                            ),
                            const SizedBox(height: 20),
                         
                            const SizedBox(height: 20),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 10),
                    ElevatedButton(
                      onPressed: () {
                       _saveAsPDF(butterflyInfo?['description'] ?? 'No description available');
                      },
                      child: Text("Save History"),
                    ),
                    const SizedBox(height: 10),
                ElevatedButton(
              onPressed: () async {
                final LatLng? returnedLocation = await Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => LocationScreen()),
                );

                    if (returnedLocation != null) {
                      final address = await getPlaceAddress(returnedLocation.latitude, returnedLocation.longitude);

                      setState(() {
                        widget.selectedLocation = returnedLocation;
                        locationName = address ?? "Unknown address";
                      });
                    }
                  },
                  child: Text("Add location"),
                ),
                ElevatedButton(
                  onPressed: () {
                    if (_pdfFile != null && _pdfFile!.existsSync()) {
                      Printing.layoutPdf(
                        onLayout: (PdfPageFormat format) async => _pdfFile!.readAsBytesSync(),
                      );
                    } else {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('Please save the PDF first.')),
                      );
                    }
                  },
                  child: Text("Open PDF"),
                ),

              
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}